# Example Travis config. See the entire example: https://github.com/JonathanPorta/ci-build

os: osx
osx_image: xcode7.3

language: csharp
solution: ./Brain-Control.sln

# Specified the branch.
branches:
  only:
    - master

# Already by default.
#mono:
#  -latest

addons:
  sonarcloud:
    organization: "graygzou-github"
    token:
      secure: ${SONAR_TOKEN}

# Set up prerequisites for installing dependencies that you need for you build.
# For example:
#   npm install
#   bundle install
before_install:
  - chmod a+x ./Scripts/*.sh
  # NUnit test
  - nuget install NUnit.Runners -Version 2.6.4 -OutputDirectory testrunner

# Set up the dependencies of your build.
install:
  - ./Scripts/install.sh
  - ./Scripts/build.sh

# Set up your environment before you run your script.
# For example:
#   copy files, start your database, or declare environment variables
before_script:

# Runs your test script
script:
  # Run customs tests.
  - ./Scripts/run-tests.sh
  - ./Scripts/convert.sh

  # OpenCover -- Not tested
  #- OpenCover.Console.exe -register:user -target:"%xunit20%\xunit.console.x86.exe" -targetargs:".\MyUnitTests\bin\Debug\MyUnitTests.dll -noshadow" -filter:"+[UnitTestTargetProject*]* -[MyUnitTests*]*" -output:".\MyProject_coverage.xml"
  #- codecov -f "MyProject_coverage.xml

  # -----------------------
  # NUnit tests
  # -----------------------
  - curl -s https://codecov.io/bash > codecov
  - chmod +x codecov

  # Test with NUnit 2
  - mono ./testrunner/NUnit.Runners.2.6.4/tools/nunit-console.exe ./Assets/Library/ScriptAssemblies/Assembly-CSharp.dll --result:nunit2
  - ./codecov -f $(pwd)/TestResult.xml -t 3c5ce3f9-ddde-4db1-a62e-f0d35e9112ec

  # Test with NUnit 3
  - mono ./testrunner/NUnit.Runners.2.6.4/tools/nunit-console.exe ./Assets/Library/ScriptAssemblies/Assembly-CSharp.dll
  - ./codecov -f $(pwd)/TestResult.xml -t 3c5ce3f9-ddde-4db1-a62e-f0d35e9112ec

# The deployment portion is used to deploy to specific,
# supported hosts, like S3, Heroku, or GitHub Releases.
#after_success:

# Build Matrix
# Creating a build matrix is a way for us to test a wide variety of environments.

cache:
  directories:
    - '$HOME/.sonar/cache'

# set notification options
notifications:
  email:
    recipients:
      - boiron.greg@gmail.com
    on_success: change # Default: change. Can be replace by never.
    on_failure: always # Default: always
